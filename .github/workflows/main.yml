name: Installation of two datacenter apic

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Cluster to deploy to (ocp02 or ocp52)'
        required: true
        default: 'ocp02'
        type: choice
        options:
          - ocp02
          - ocp52

env:
  NAMESPACE: cp4i-apic
  HOME: ${{ github.workspace }} 
  ENV: DEV
  GITHUB_TOKEN: ${{ secrets.App_Repo_Secret }}
jobs:
  prepare-active-cluster:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # - name: Install oc CLI
      #   run: |
      #     # Define the version of oc CLI you want to install
      #     OC_VERSION="4.14.0" # Change this to the desired version
          
      #     # Download the oc CLI binary
      #     wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OC_VERSION}/openshift-client-linux-${OC_VERSION}.tar.gz
  
      #     # Extract the tarball
      #     tar xvf openshift-client-linux-${OC_VERSION}.tar.gz
  
      #     # Move oc binary to /usr/local/bin
      #     sudo mv oc /usr/local/bin/
  
      #     # Verify the installation
      #     oc version

      # - name: Set up Argo CD CLI
      #   run: |
      #     curl -sSL https://github.com/argoproj/argo-cd/releases/download/v2.11.8/argocd-linux-amd64 -o /usr/local/bin/argocd
      #     chmod +x /usr/local/bin/argocd

      # - name: Set complete
      #   run: |
      #     echo "setup completed"
      #     echo "oc"
      #     oc
      #     echo "argocd"
      #     argocd
      
      - name: Connect to ocp02 cluster
        run: |
          oc login --token=sha256~QQsexSzJKrEmK1la4m2HjTE-MFn6wRzoqDIG9f-aEgc --server=https://api.o1-791284.cp.fyre.ibm.com:6443 --insecure-skip-tls-verify
          oc project cp4i-apic

      - name: Connect to Argo CD on ocp02
        run: |
          argocd login argocd-sample-server-cp4i-apic.apps.o1-791284.cp.fyre.ibm.com --username admin --password VlqPvHdRApBwhCnkiaUG8fo261juT5rL --insecure

      - name: create platform navigator
        run: |
          echo "Creating platform navigator"
          if oc get platformnavigator "platform-navigator-apic" -n "$NAMESPACE" &> /dev/null; then
              echo "PN exists in namespace"
          else
          argocd app sync epic-install --resource "*:PlatformNavigator:platform-navigator-apic"
        

          check_component_status() {
              oc get platformnavigator -n "cp4i-apic" -o jsonpath="{.items[?(@.metadata.name=='platform-navigator-apic')].status.conditions[?(@.type=='Ready')].status}" | grep -q "True"
          }

          # Number of retries
          MAX_RETRIES=3

          # Check the status up to MAX_RETRIES times
          for ((i=1; i<=MAX_RETRIES; i++)); do
              if check_component_status; then
                  echo "The component platform-navigator-apic is ready."
                  exit 0
              else
                  echo "The component platform-navigator-apic is not ready. Retrying in 5 minutes..."
                  sleep 400  # Sleep for 5 minutes
              fi
          done

          # If the component is still not ready after MAX_RETRIES, output failure
          echo "The component platform-navigator-apic failed to become ready after multiple retries."
          fi

      - name: create mgmt-encryption-key  
        run: |
          echo "Creating management encryption key secret"
          if oc get secret "mgmt-encryption-key" -n "$NAMESPACE" &> /dev/null; then
              echo "Secret exists in namespace"
          else
              echo "Secret does not exist in namespace, creating new secret"
              argocd app sync epic-install --resource "*:Secret:mgmt-encryption-key"
          fi
          
      - name: create ptl-encryption-key
        run: |
          echo "Creating portal encryption key secret"
          if oc get secret "ptl-encryption-key" -n "$NAMESPACE" &> /dev/null; then
              echo "Secret exists in namespace"
          else
              echo "Secret does not exist in namespace, creating new secret"
              argocd app sync epic-install --resource "*:Secret:ptl-encryption-key"
          fi

      - name: create self-signed issuer 
        run: |
          echo "Creating self-signed issuer"
          if oc get issuer "apic-self-signed" -n "$NAMESPACE" &> /dev/null; then
              echo "issuer exists in namespace"
          else
              echo "issuer does not exist in namespace, creating new issuer"
              argocd app sync epic-install --resource "*:Issuer:apic-self-signed"
          fi

      - name: create ingress-ca certificate
        run: |
          echo "Creating ingress-ca certificate"
          if oc get certificate "apic-ingress-ca" -n "$NAMESPACE" &> /dev/null; then
              echo "Certificate exists in namespace"
          else
              echo "Certificate does not exist in namespace, creating new certificate"
              argocd app sync epic-install --resource "*:Certificate:apic-ingress-ca"
          fi

      - name: create ingress issuer
        run: |
          echo "Creating ingress issuer"
          if oc get issuer "apic-ingress-issuer" -n "$NAMESPACE" &> /dev/null; then
              echo "Issuer exists in namespace"
          else
              echo "Issuer  does not exist in namespace, creating new Issuer"
              argocd app sync epic-install --resource "*:Issuer:apic-ingress-issuer"
          fi

      - name: create TLS client replication certificate for management 
        run: |
          echo "Creating apic-mgmt-replication-client certificate"
          if oc get certificate "apic-mgmt-replication-client" -n "$NAMESPACE" &> /dev/null; then
              echo "Certificate exists in namespace"
          else
              echo "Certificate does not exist in namespace, creating new certificate"
              argocd app sync epic-install --resource "*:Certificate:apic-mgmt-replication-client"
          fi
      
      - name: create TLS client replication certificate for portal 
        run: |
          echo "Creating apic-ptl-replication-client certificate"
          if oc get certificate "apic-ptl-replication-client" -n "$NAMESPACE" &> /dev/null; then
              echo "Certificate exists in namespace"
          else
              echo "Certificate does not exist in namespace, creating new certificate"
              argocd app sync epic-install --resource "*:Certificate:apic-ptl-replication-client"
          fi

      - name: Export ingress-ca issuer secret
        run: |
          echo "Exporting ingress-ca issuer secret"
          if oc get secret "apic-ingress-ca" -n "$NAMESPACE" &> /dev/null; then
              echo "Secret exists in namespace"
              oc get secret apic-ingress-ca -o yaml -n cp4i-apic  > ${{ github.workspace }}/ca-issuer-secret.yaml
          else
              echo "secret does not exist in namespace, creating new secret"
              argocd app sync epic-install --resource "*:Certificate:apic-ingress-ca"
              oc get secret apic-ingress-ca -o yaml -n cp4i-apic  > ${{ github.workspace }}/ca-issuer-secret.yaml
          fi
          
      - name: Upload ingress-ca issuer secret as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ingress-ca-issuer-secret
          path: ${{ github.workspace }}/ca-issuer-secret.yaml
      
      - name: validate resources
        run: |
          oc get secrets -n cp4i-apic | grep apic
          oc get certs -n cp4i-apic | grep apic
          oc get issuer -n cp4i-apic | grep apic

      - name: create active apiconnect cluster
        run: |
          echo "Creating active apic"
          if oc get apiconnectcluster "smbc-apic1" -n "$NAMESPACE" &> /dev/null; then
              echo "api connect cluster exists"
          else
              echo "api connect cluster not exists, creating new active cluster"
              argocd app sync epic-install --resource "*:APIConnectCluster:smbc-apic1"
          fi
