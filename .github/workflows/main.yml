name: Installation of two datacenter apic

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Cluster to deploy to (ocp02 or ocp52)'
        required: true
        default: 'ocp02'
        type: choice
        options:
          - ocp02
          - ocp52

env:
  NAMESPACE: cp4i-apic
  HOME: ${{ github.workspace }} 
  ENV: DEV
  GITHUB_TOKEN: ${{ secrets.App_Repo_Secret }}
jobs:
  prepare-active-cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install oc CLI
        run: |
          # Define the version of oc CLI you want to install
          OC_VERSION="4.14.0" # Change this to the desired version
          
          # Download the oc CLI binary
          wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OC_VERSION}/openshift-client-linux-${OC_VERSION}.tar.gz
  
          # Extract the tarball
          tar xvf openshift-client-linux-${OC_VERSION}.tar.gz
  
          # Move oc binary to /usr/local/bin
          sudo mv oc /usr/local/bin/
  
          # Verify the installation
          oc version

      - name: Set up Argo CD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/download/v2.11.8/argocd-linux-amd64 -o /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

      - name: Set complete
        run: |
          echo "setup completed"
          echo "oc"
          oc
          echo "argocd"
          argocd
      
      - name: Connect to ocp02 cluster
        run: |
          oc login --token=sha256~QQsexSzJKrEmK1la4m2HjTE-MFn6wRzoqDIG9f-aEgc --server=https://api.o1-791284.cp.fyre.ibm.com:6443

      - name: Connect to Argo CD on ocp02
        run: |
          argocd login argocd-sample-server-cp4i-apic.apps.o1-791284.cp.fyre.ibm.com --username admin --password VlqPvHdRApBwhCnkiaUG8fo261juT5rL

      - name: create platform navigator
        run: |
          echo "Creating platform navigator"
          argocd app sync apic-install --resource :PlatformNavigator:platform-navigator-apic
          
          # while [ "$(oc get deployment app1 -o jsonpath='{.status.availableReplicas}')" != "1" ]; do
          #   sleep 10
          # done

          check_component_status() {
              oc get platformnavigator -n "cp4i-apic" -o jsonpath="{.items[?(@.metadata.name=='platform-navigator-apic')].status.conditions[?(@.type=='Ready')].status}" | grep -q "True"
          }

          # Number of retries
          MAX_RETRIES=3

          # Check the status up to MAX_RETRIES times
          for ((i=1; i<=MAX_RETRIES; i++)); do
              if check_component_status; then
                  echo "The component platform-navigator-apic is ready."
                  exit 0
              else
                  echo "The component platform-navigator-apic is not ready. Retrying in 5 minutes..."
                  sleep 300  # Sleep for 5 minutes
              fi
          done

          # If the component is still not ready after MAX_RETRIES, output failure
          echo "The component platform-navigator-apic failed to become ready after multiple retries."